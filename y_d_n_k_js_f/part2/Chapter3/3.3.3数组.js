// 3.3.3　数组
// 数组也支持[] 访问形式，不过就像我们之前提到过的，数组有一套更加结构化的值存储
// 机制（不过仍然不限制值的类型）。数组期望的是数值下标，也就是说值存储的位置（通
// 常被称为索引）是整数，比如说 0 和 42：

var myArray = ["foo", 42, "bar"];
myArray.length; // 3
myArray[0]; // "foo"
myArray[2]; // "bar"

// 数组也是对象，所以虽然每个下标都是整数，你仍然可以给数组添加属性：

var myArray = ["foo", 42, "bar"];
myArray.baz = "baz";
myArray.length; // 3
myArray.baz; // "baz"

// 可以看到虽然添加了命名属性（无论是通过.语法还是[] 语法），数组的 length 值并未发
// 生变化。
// 你完全可以把数组当作一个普通的键 / 值对象来使用，并且不添加任何数值索引，但是这
// 并不是一个好主意。数组和普通的对象都根据其对应的行为和用途进行了优化，所以最好
// 只用对象来存储键 / 值对，只用数组来存储数值下标 / 值对。
// 注意：如果你试图向数组添加一个属性，但是属性名“看起来”像一个数字，那它会变成
// 一个数值下标（因此会修改数组的内容而不是添加一个属性）：

var myArray = ["foo", 42, "bar"];
myArray["3"] = "baz";
myArray.length; // 4
myArray[3]; // "baz"