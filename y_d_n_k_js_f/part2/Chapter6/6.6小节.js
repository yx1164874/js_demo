// 6.6　小结
// 在软件架构中你可以选择是否使用类和继承设计模式。大多数开发者理所当然地认为类是
// 唯一（合适）的代码组织方式，但是本章中我们看到了另一种更少见但是更强大的设计模


// 式： 行为委托。
// 行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。 JavaScript 的
// [[Prototype]] 机制本质上就是行为委托机制。也就是说，我们可以选择在 JavaScript 中努
// 力实现类机制（参见第 4 和第 5 章），也可以拥抱更自然的 [[Prototype]] 委托机制。
// 当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰。
// 对象关联（对象之前互相关联）是一种编码风格，它倡导的是直接创建和关联对象，不把
// 它们抽象成类。对象关联可以用基于 [[Prototype]] 的行为委托非常自然地实现。