// 4.1　类理论
// 类 / 继承描述了一种代码的组织结构形式——一种在软件中对真实世界中问题领域的建模
// 方法。
// 面向对象编程强调的是数据和操作数据的行为本质上是互相关联的（当然，不同的数据有
// 不同的行为），因此好的设计就是把数据以及和它相关的行为打包（或者说封装）起来。
// 这在正式的计算机科学中有时被称为数据结构。
// 举例来说，用来表示一个单词或者短语的一串字符通常被称为字符串。字符就是数据。但
// 是你关心的往往不是数据是什么，而是可以对数据做什么，所以可以应用在这种数据上的
// 行为（计算长度、添加数据、搜索，等等）都被设计成 String 类的方法。


// 所有字符串都是 String 类的一个实例，也就是说它是一个包裹，包含字符数据和我们可以
// 应用在数据上的函数。
// 我们还可以使用类对数据结构进行分类，可以把任意数据结构看作范围更广的定义的一种
// 特例。
// 我们来看一个常见的例子，“汽车”可以被看作“交通工具”的一种特例，后者是更广泛
// 的类。
// 我们可以在软件中定义一个 Vehicle 类和一个 Car 类来对这种关系进行建模。
// Vehicle 的定义可能包含推进器（比如引擎）、载人能力等等，这些都是 Vehicle 的行为。我
// 们在 Vehicle 中定义的是（几乎）所有类型的交通工具（飞机、火车和汽车）都包含的东西。
// 在我们的软件中，对不同的交通工具重复定义“载人能力”是没有意义的。相反，我们只
// 在 Vehicle 中定义一次，定义 Car 时，只要声明它继承（或者扩展）了 Vehicle 的这个基
// 础定义就行。 Car 的定义就是对通用 Vehicle 定义的特殊化。
// 虽然 Vehicle 和 Car 会定义相同的方法，但是实例中的数据可能是不同的，比如每辆车独
// 一无二的 VIN（ Vehicle Identification Number，车辆识别号码），等等。
// 这就是类、继承和实例化。
// 类的另一个核心概念是多态，这个概念是说父类的通用行为可以被子类用更特殊的行为重
// 写。实际上，相对多态性允许我们从重写行为中引用基础行为。
// 类理论强烈建议父类和子类使用相同的方法名来表示特定的行为，从而让子类重写父类。
// 我们之后会看到，在 JavaScript 代码中这样做会降低代码的可读性和健壮性。

// 4.1.1 “类”设计模式
// 你可能从来没把类作为设计模式来看待，讨论得最多的是面向对象设计模式，比如迭代器
// 模式、 观察者模式、 工厂模式、 单例模式，等等。从这个角度来说，我们似乎是在（低级）
// 面向对象类的基础上实现了所有（高级）设计模式，似乎面向对象是优秀代码的基础。
// 如果你之前接受过正规的编程教育的话，可能听说过过程化编程，这种代码只包含过程
// （函数）调用，没有高层的抽象。或许老师还教过你最好使用类把过程化风格的“意大利
// 面代码”转换成结构清晰、组织良好的代码。
// 当然，如果你有函数式编程（比如 Monad）的经验就会知道类也是非常常用的一种设计模
// 式。但是对于其他人来说，这可能是第一次知道类并不是必须的编程基础，而是一种可选
// 的代码抽象。

// 有些语言（比如 Java）并不会给你选择的机会，类并不是可选的——万物皆是类。其他语
// 言（比如 C/C++ 或者 PHP）会提供过程化和面向类这两种语法，开发者可以选择其中一种
// 风格或者混用两种风格。

// 4.1.2 JavaScript中的“类”
// JavaScript 属于哪一类呢？在相当长的一段时间里， JavaScript 只有一些近似类的语法元素
// （比如 new 和 instanceof），不过在后来的 ES6 中新增了一些元素，比如 class 关键字（参见
// 附录 A）。
// 这是不是意味着 JavaScript 中实际上有类呢？简单来说： 不是。
// 由于类是一种设计模式，所以你可以用一些方法（本章之后会介绍）近似实现类的功能。
// 为了满足对于类设计模式的最普遍需求， JavaScript 提供了一些近似类的语法。
// 虽然有近似类的语法，但是 JavaScript 的机制似乎一直在阻止你使用类设计模式。在
// 近似类的表象之下， JavaScript 的机制其实和类完全不同。语法糖和（广泛使用的）
// JavaScript“类”库试图掩盖这个现实，但是你迟早会面对它：其他语言中的类和 JavaScript
// 中的“类”并不一样。
// 总结一下，在软件设计中类是一种可选的模式，你需要自己决定是否在 JavaScript 中使用
// 它。由于许多开发者都非常喜欢面向类的软件设计，我们会在本章的剩余部分中介绍如何
// 在 JavaScript 中实现类以及存在的一些问题